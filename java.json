{
	"questionList": [

		{

			"question": " What is Java?",
			"answer": "Java is the high-level, object-oriented, robust, secure programming language, platform-independent, high performance, Multithreaded, and portable programming language. It was developed by James Gosling in June 1991. It can also be known as the platform as it provides its own JRE and API.",
			"Priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is the platform ?",
			"answer": "A platform is the hardware or software environment in which a piece of software is executed. There are two types of platforms, software-based and hardware-based. Java provides the software-based platform",
			"Priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is an object?",
			"answer": "The Object is the real-time entity having some state and behavior. In Java, Object is an instance of the class having the instance variables as the state of the object and the methods as the behavior of the object. The object of a class can be created by using the new keyword.",
			"Priority": "low",
			"language": "coreJava"
		},
		{

			"question": " What is “this” keyword in java?",
			"answer": "Within an instance method or a constructor, this is a reference to the current object — the object whose method or constructor is being called. You can refer to any member of the current object from within an instance method or a constructor by using this.",
			"Priority": "low",
			"language": "coreJava"
		},
		{

			"question": "Can we override private methods in Java?",
			"answer": "No, a private method cannot be overridden since it is not visible from any other class.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": " What is an abstract class?",
			"answer": "Abstract classes are classes that contain one or more abstract methods. An abstract method is a method that is declared but contains no implementation. Abstract classes may not be instantiated, and require subclasses to provide implementations for the abstract methods",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": ". Can we overload main() method?",
			"answer": "The main method in Java is no extra-terrestrial method. Apart from the fact that main() is just like any other method & can be overloaded in a similar manner, JVM always looks for the method signature to launch the program.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is object cloning?",
			"answer": "Object cloning means to create an exact copy of the original object. If a class needs to support cloning, it must implement java.lang.Cloneable interface and override clone() method from Object class. ",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "Why method overloading is not possible by changing the return type in java?",
			"answer": "n C++ and Java, functions can not be overloaded if they differ only in the return type. The return type of functions is not a part of the mangled name which is generated by the compiler for uniquely identifying each function. The No of arguments, Type of arguments & Sequence of arguments are the parameters which are used to generate the unique mangled name for each function. It is on the basis of these unique mangled names that compiler can understand which function to call even if the names are same(overloading).",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": " Can we override private methods in Java?",
			"answer": "No, a private method cannot be overridden since it is not visible from any other class.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": " What is blank final variable?",
			"answer": "A final variable in Java can be assigned a value only once, we can assign a value either in declaration or later ,A final variable in Java can be assigned a value only once, we can assign a value either in declaration or later.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is “super” keyword in java?",
			"answer": "The super keyword in java is a reference variable that is used to refer parent class objects. The keyword “super” came into the picture with the concept of Inheritance. Whenever you create the instance of a subclass, an instance of parent class is created implicitly i.e. referred by super reference variable.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is static variable in Java?",
			"answer": "The static keyword in java is used for memory management mainly. We can apply java static keyword with variables, methods, blocks and nested class. The static keyword belongs to the class than the instance of the class.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "Differences between HashMap and HashTable in Java.",
			"answer": "HashMap is non synchronized. It is not-thread safe and can’t be shared between many threads without proper synchronization code whereas Hashtable is synchronized. It is thread-safe and can be shared with many threads,HashMap allows one null key and multiple null values whereas Hashtable doesn’t allow any null key or value ,HashMap is generally preferred over HashTable if thread synchronization is not needed",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "How are Java objects stored in memory?",
			"answer": "In Java, all objects are dynamically allocated on Heap. This is different from C++ where objects can be allocated memory either on Stack or on Heap. In C++, when we allocate abject using new(), the object is allocated on Heap, otherwise on Stack if not global or static.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "Explain Final keyword in java?",
			"answer": "Final keyword in java is used to restrict usage of variable, class and method.Variable:\n Value of Final variable is constant,you can not change it.\nMethod: you can’ t override a Final method.\nClass: you can’ t inherit from Final class.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "Why is Java called the ‘Platform Independent Programming Language’?",
			"answer": "Platform independence means that execution of your program does not dependent on type of operating system(it could be any : Linux, windows, Mac ..etc). So compile code only once and run it on any System (In C/C++, we need to compile the code for every machine on which we run it). Java is both compiler(javac) and interpreter(jvm) based lauguage. Your java source code is first compiled into byte code using javac compiler. This byte code can be easily converted to equivalent machine code using JVM. JVM(Java Virtual Machine) is available in all operating systems we install. Hence, byte code generated by javac is universal and can be converted to machine code on any operating system, this is the reason why java is platform independent.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "When is the super keyword used?",
			"answer": "super keyword is used to refer:\nimmediate parent class constructor,\nimmediate parent class variable,\nimmediate parent class method.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is the difference between StringBuffer and String?",
			"answer": "String is an Immutable class, i.e. you can not modify its content once created. While StringBuffer is a mutable class, means you can change its content later. Whenever we alter content of String object, it creates a new string and refer to that,it does not modify the existing one. This is the reason that the performance with StringBuffer is better than with String.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "Why multiple inheritance is not supported in java?",
			"answer": "Java supports multiple inheritance but not through classes, it supports only through its interfaces. The reason for not supporting multiple inheritance is to avoid the conflict and complexity arises due to it and keep Java a Simple Object Oriented Language. If we recall this in C++, there is a special case of multiple inheritance (diamond problem) where you have a multiple inheritance with two classes which have methods in conflicts. So, Java developers decided to avoid such conflicts and didn’t allow multiple inheritance through classes at all.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "Can a top level class be private or protected?",
			"answer": "Top level classes in java can’t be private or protected, but inner classes in java can. The reason for not making a top level class as private is very obvious, because nobody can see a private class and thus they can not use it. Declaring a class as protected also doesn’t make any sense. The only difference between default visibility and protected visibility is that we can use it in any package by inheriting it. Since in java there is no such concept of package inheritance, defining a class as protected is no different from default.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is the difference between ‘throw’ and ‘throws’ in Java Exception Handling?",
			"answer": "throw keyword is used to throw Exception from any method or static block whereas throws is used to indicate that which Exception can possibly be thrown by this method,If any method throws checked Exception,then caller can either handle this exception (using try catch block) or can re throw it by declaring another‘ throws’ clause in method declaration.throw clause can be used in any part of code where you feel a specific exception needs to be thrown to the calling method ",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What are the ways in which a thread can enter the waiting state?",
			"answer": "A thread can enter the waiting state by invoking its sleep() method, by blocking on IO, by unsuccessfully attempting to acquire an object's lock, or by invoking an object's wait() method. It can also enter the waiting state by invoking its (deprecated) suspend() method.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is finalize() method?",
			"answer": "Unlike c++ , we don’t need to destroy objects explicitly in Java. ‘Garbage Collector‘ does that automatically for us. Garbage Collector checks if no references to an object exist, that object is assumed to be no longer required, and the memory occupied by the object can be freed. Sometimes an object can hold non-java resources such as file handle or database connection, then you want to make sure these resources are also released before object is destroyed. To perform such operation Java provide protected void finalize() in object class. You can override this method in your class and do the required tasks. Right before an object is freed, the java run time calls the finalize() method on that object. Refer this for more details.",
			"priority": "low",
			"language": "algo"
		},
		{

			"question": "Difference in Set and List interface?",
			"answer": "Set and List both are child interface of Collection interface. There are following two main differences between them List can hold duplicate values but Set doesn’t allow this,In List interface data is present in the order you inserted but in the case of Set insertion order is not preserved.",
			"priority": "low",
			"language": "algo"
		},
		{

			"question": "What will happen if you put System.exit(0) on try or catch block? Will finally block execute?",
			"answer": "By Calling System.exit(0) in try or catch block, we can skip the finally block. System.exit(int) method can throw a SecurityException. If Sysytem.exit(0) exits the JVM without throwing that exception then finally block will not execute. But, if System.exit(0) does throw security exception then finally block will be executed.",
			"priority": "low",
			"language": "algo"
		},
		{

			"question": "What do you mean by Access Modifier?",
			"answer": "Java provides access modifiers to set access levels for classes, variables, methods and constructors. A member has package or default accessibility when no accessibility modifier is specified.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is protected access modifier?",
			"answer": "Variables, methods and constructors which are declared protected in a superclass can be accessed only by the subclasses in other package or any class within the package of the protected members' class.",
			"priority": "low",
			"language": "hrAdmin"
		},
		{

			"question": "What do you mean by synchronized Non Access Modifier?",
			"answer": "Java provides these modifiers for providing functionalities other than Access Modifiers, synchronized used to indicate that a method can be accessed by only one thread at a time.",
			"priority": "low",
			"language": "hrAdmin"
		},
		{

			"question": "Why is String class considered immutable?",
			"answer": "The String class is immutable, so that once it is created a String object cannot be changed. Since String is immutable it can safely be shared between many threads ,which is considered very important for multithreaded programming.",
			"priority": "low",
			"language": "hrAdmin"
		},
		{

			"question": "Why is StringBuffer called mutable?",
			"answer": "The String class is considered as immutable, so that once it is created a String object cannot be changed. If there is a necessity to make alot of modifications to Strings of characters then StringBuffer should be used.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is the difference between StringBuffer and StringBuilder class?",
			"answer": "Use StringBuilder whenever possible because it is faster than StringBuffer. But, if thread safety is necessary then use StringBuffer objects.",
			"priority": "low",
			"language": "mySQL"
		},
		{

			"question": "Explain Runtime Exceptions?",
			"answer": "It is an exception that occurs that probably could have been avoided by the programmer. As opposed to checked exceptions, runtime exceptions are ignored at the time of compliation.",
			"priority": "low",
			"language": "mySQL"
		},
		{

			"question": "When Abstract methods are used?",
			"answer": "If you want a class to contain a particular method but you want the actual implementation of that method to be determined by child classes, you can declare the method in the parent class as abstract.",
			"priority": "low",
			"language": "mySQL"
		},
		{

			"question": "What is Encapsulation?",
			"answer": "It is the technique of making the fields in a class private and providing access to the fields via public methods. If a field is declared private, it cannot be accessed by anyone outside the class, thereby hiding the fields within the class. Therefore encapsulation is also referred to as data hiding ",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is Comparable Interface?",
			"answer": "It is used to sort collections and arrays of objects using the collections.sort() and java.utils. The objects of the class implementing the Comparable interface can be ordered.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is a WAR file?",
			"answer": "This is Web Archive File and used to store XML, java classes, and JavaServer pages. which is used to distribute a collection of JavaServer Pages, Java Servlets, Java classes, XML files, static Web pages etc.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is NullPointerException?",
			"answer": "A NullPointerException is thrown when calling the instance method of a null object, accessing or modifying the field of a null object etc.",
			"priority": "low",
			"language": "cSharp"
		},
		{

			"question": "What invokes a thread's run() method?",
			"answer": "After a thread is started, via its start() method of the Thread class, the JVM invokes the thread's run() method when the thread is initially executed.",
			"priority": "low",
			"language": "cSharp"
		},
		{

			"question": "What is the difference between yielding and sleeping?",
			"answer": "When a task invokes its yield() method, it returns to the ready state. When a task invokes its sleep() method, it returns to the waiting state.",
			"priority": "low",
			"language": "cSharp"
		},
		{

			"question": "Why Vector class is used?",
			"answer": "The Vector class provides the capability to implement a growable array of objects. Vector proves to be very useful if you don't know the size of the array in advance, or you just need one that can change sizes over the lifetime of a program.",
			"priority": "low",
			"language": "cSharp"
		}, {

			"question": "What are Wrapper classes?",
			"answer": "These are classes that allow primitive types to be accessed as objects. Example: Integer, Character, Double, Boolean etc.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is the difference between the paint() and repaint() methods?",
			"answer": "The paint() method supports painting via a Graphics object. The repaint() method is used to cause paint() to be invoked by the AWT painting thread.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is Serialization and deserialization?",
			"answer": "Serialization is the process of writing the state of an object to a byte stream. Deserialization is the process of restoring these objects.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "Explain the use of sublass in a Java program?",
			"answer": "Sub class inherits all the public and protected methods and the implementation. It also inherits all the default modifier methods and their implementation",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is the difference between Swing and AWT components?",
			"answer": "AWT components are heavy-weight, whereas Swing components are lightweight. Heavy weight components depend on the local windowing toolkit. For example, java.awt.Button is a heavy weight component, when it is running on the Java platform for Unix platform, it maps to a real Motif button.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "Is there any limitation of using Inheritance?",
			"answer": "Yes, since inheritance inherits everything from the super class and interface, it may make the subclass too clustering and sometimes error-prone when dynamic overriding or dynamic overloading in some situation.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "When is the ArrayStoreException thrown?",
			"answer": "When copying elements between different arrays, if the source or destination arguments are not arrays or their types are not compatible, an ArrayStoreException will be thrown.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "coreJava"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "coreJava"
		},

		{

			"question": " What is Java?",
			"answer": "Java is the high-level, object-oriented, robust, secure programming language, platform-independent, high performance, Multithreaded, and portable programming language. It was developed by James Gosling in June 1991. It can also be known as the platform as it provides its own JRE and API.",
			"Priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is the platform ?",
			"answer": "A platform is the hardware or software environment in which a piece of software is executed. There are two types of platforms, software-based and hardware-based. Java provides the software-based platform",
			"Priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is an object?",
			"answer": "The Object is the real-time entity having some state and behavior. In Java, Object is an instance of the class having the instance variables as the state of the object and the methods as the behavior of the object. The object of a class can be created by using the new keyword.",
			"Priority": "low",
			"language": "advancedJava"
		},
		{

			"question": " What is “this” keyword in java?",
			"answer": "Within an instance method or a constructor, this is a reference to the current object — the object whose method or constructor is being called. You can refer to any member of the current object from within an instance method or a constructor by using this.",
			"Priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Can we override private methods in Java?",
			"answer": "No, a private method cannot be overridden since it is not visible from any other class.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": " What is an abstract class?",
			"answer": "Abstract classes are classes that contain one or more abstract methods. An abstract method is a method that is declared but contains no implementation. Abstract classes may not be instantiated, and require subclasses to provide implementations for the abstract methods",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": ". Can we overload main() method?",
			"answer": "The main method in Java is no extra-terrestrial method. Apart from the fact that main() is just like any other method & can be overloaded in a similar manner, JVM always looks for the method signature to launch the program.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is object cloning?",
			"answer": "Object cloning means to create an exact copy of the original object. If a class needs to support cloning, it must implement java.lang.Cloneable interface and override clone() method from Object class. ",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Why method overloading is not possible by changing the return type in java?",
			"answer": "n C++ and Java, functions can not be overloaded if they differ only in the return type. The return type of functions is not a part of the mangled name which is generated by the compiler for uniquely identifying each function. The No of arguments, Type of arguments & Sequence of arguments are the parameters which are used to generate the unique mangled name for each function. It is on the basis of these unique mangled names that compiler can understand which function to call even if the names are same(overloading).",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": " Can we override private methods in Java?",
			"answer": "No, a private method cannot be overridden since it is not visible from any other class.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": " What is blank final variable?",
			"answer": "A final variable in Java can be assigned a value only once, we can assign a value either in declaration or later ,A final variable in Java can be assigned a value only once, we can assign a value either in declaration or later.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is “super” keyword in java?",
			"answer": "The super keyword in java is a reference variable that is used to refer parent class objects. The keyword “super” came into the picture with the concept of Inheritance. Whenever you create the instance of a subclass, an instance of parent class is created implicitly i.e. referred by super reference variable.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is static variable in Java?",
			"answer": "The static keyword in java is used for memory management mainly. We can apply java static keyword with variables, methods, blocks and nested class. The static keyword belongs to the class than the instance of the class.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Differences between HashMap and HashTable in Java.",
			"answer": "HashMap is non synchronized. It is not-thread safe and can’t be shared between many threads without proper synchronization code whereas Hashtable is synchronized. It is thread-safe and can be shared with many threads,HashMap allows one null key and multiple null values whereas Hashtable doesn’t allow any null key or value ,HashMap is generally preferred over HashTable if thread synchronization is not needed",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "How are Java objects stored in memory?",
			"answer": "In Java, all objects are dynamically allocated on Heap. This is different from C++ where objects can be allocated memory either on Stack or on Heap. In C++, when we allocate abject using new(), the object is allocated on Heap, otherwise on Stack if not global or static.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Explain Final keyword in java?",
			"answer": "Final keyword in java is used to restrict usage of variable, class and method.\nVariable: Value of Final variable is constant,you can not change it.\nMethod: you can’ t override a Final method.\nClass: you can’ t inherit from Final class.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Why is Java called the ‘Platform Independent Programming Language’?",
			"answer": "Platform independence means that execution of your program does not dependent on type of operating system(it could be any : Linux, windows, Mac ..etc). So compile code only once and run it on any System (In C/C++, we need to compile the code for every machine on which we run it). Java is both compiler(javac) and interpreter(jvm) based lauguage. Your java source code is first compiled into byte code using javac compiler. This byte code can be easily converted to equivalent machine code using JVM. JVM(Java Virtual Machine) is available in all operating systems we install. Hence, byte code generated by javac is universal and can be converted to machine code on any operating system, this is the reason why java is platform independent.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "When is the super keyword used?",
			"answer": "super keyword is used to refer:\nimmediate parent class constructor,\nimmediate parent class variable,\nimmediate parent class method.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is the difference between StringBuffer and String?",
			"answer": "String is an Immutable class, i.e. you can not modify its content once created. While StringBuffer is a mutable class, means you can change its content later. Whenever we alter content of String object, it creates a new string and refer to that,it does not modify the existing one. This is the reason that the performance with StringBuffer is better than with String.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Why multiple inheritance is not supported in java?",
			"answer": "Java supports multiple inheritance but not through classes, it supports only through its interfaces. The reason for not supporting multiple inheritance is to avoid the conflict and complexity arises due to it and keep Java a Simple Object Oriented Language. If we recall this in C++, there is a special case of multiple inheritance (diamond problem) where you have a multiple inheritance with two classes which have methods in conflicts. So, Java developers decided to avoid such conflicts and didn’t allow multiple inheritance through classes at all.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Can a top level class be private or protected?",
			"answer": "Top level classes in java can’t be private or protected, but inner classes in java can. The reason for not making a top level class as private is very obvious, because nobody can see a private class and thus they can not use it. Declaring a class as protected also doesn’t make any sense. The only difference between default visibility and protected visibility is that we can use it in any package by inheriting it. Since in java there is no such concept of package inheritance, defining a class as protected is no different from default.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is the difference between ‘throw’ and ‘throws’ in Java Exception Handling?",
			"answer": "throw keyword is used to throw Exception from any method or static block whereas throws is used to indicate that which Exception can possibly be thrown by this method\nIf any method throws checked Exception,then caller can either handle this exception(using\ntry\ncatch block) or can re\nthrow it by declaring another‘ throws’ clause in method declaration.throw clause can be used in any part of code where you feel a specific exception needs to be thrown to the calling method ",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What are the ways in which a thread can enter the waiting state?",
			"answer": "A thread can enter the waiting state by invoking its sleep() method, by blocking on IO, by unsuccessfully attempting to acquire an object's lock, or by invoking an object's wait() method. It can also enter the waiting state by invoking its (deprecated) suspend() method.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is finalize() method?",
			"answer": "Unlike c++ , we don’t need to destroy objects explicitly in Java. ‘Garbage Collector‘ does that automatically for us. Garbage Collector checks if no references to an object exist, that object is assumed to be no longer required, and the memory occupied by the object can be freed. Sometimes an object can hold non-java resources such as file handle or database connection, then you want to make sure these resources are also released before object is destroyed. To perform such operation Java provide protected void finalize() in object class. You can override this method in your class and do the required tasks. Right before an object is freed, the java run time calls the finalize() method on that object. Refer this for more details.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Difference in Set and List interface?",
			"answer": "Set and List both are child interface of Collection interface. There are following two main differences between them List can hold duplicate values but Set doesn’t allow this,In List interface data is present in the order you inserted but in the case of Set insertion order is not preserved.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What will happen if you put System.exit(0) on try or catch block? Will finally block execute?",
			"answer": "By Calling System.exit(0) in try or catch block, we can skip the finally block. System.exit(int) method can throw a SecurityException. If Sysytem.exit(0) exits the JVM without throwing that exception then finally block will not execute. But, if System.exit(0) does throw security exception then finally block will be executed.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What do you mean by Access Modifier?",
			"answer": "Java provides access modifiers to set access levels for classes, variables, methods and constructors. A member has package or default accessibility when no accessibility modifier is specified.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is protected access modifier?",
			"answer": "Variables, methods and constructors which are declared protected in a superclass can be accessed only by the subclasses in other package or any class within the package of the protected members' class.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What do you mean by synchronized Non Access Modifier?",
			"answer": "Java provides these modifiers for providing functionalities other than Access Modifiers, synchronized used to indicate that a method can be accessed by only one thread at a time.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Why is String class considered immutable?",
			"answer": "The String class is immutable, so that once it is created a String object cannot be changed. Since String is immutable it can safely be shared between many threads ,which is considered very important for multithreaded programming.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Why is StringBuffer called mutable?",
			"answer": "The String class is considered as immutable, so that once it is created a String object cannot be changed. If there is a necessity to make alot of modifications to Strings of characters then StringBuffer should be used.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is the difference between StringBuffer and StringBuilder class?",
			"answer": "Use StringBuilder whenever possible because it is faster than StringBuffer. But, if thread safety is necessary then use StringBuffer objects.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Explain Runtime Exceptions?",
			"answer": "It is an exception that occurs that probably could have been avoided by the programmer. As opposed to checked exceptions, runtime exceptions are ignored at the time of compliation.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "When Abstract methods are used?",
			"answer": "If you want a class to contain a particular method but you want the actual implementation of that method to be determined by child classes, you can declare the method in the parent class as abstract.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is Encapsulation?",
			"answer": "It is the technique of making the fields in a class private and providing access to the fields via public methods. If a field is declared private, it cannot be accessed by anyone outside the class, thereby hiding the fields within the class. Therefore encapsulation is also referred to as data hiding ",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is Comparable Interface?",
			"answer": "It is used to sort collections and arrays of objects using the collections.sort() and java.utils. The objects of the class implementing the Comparable interface can be ordered.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is a WAR file?",
			"answer": "This is Web Archive File and used to store XML, java classes, and JavaServer pages. which is used to distribute a collection of JavaServer Pages, Java Servlets, Java classes, XML files, static Web pages etc.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is NullPointerException?",
			"answer": "A NullPointerException is thrown when calling the instance method of a null object, accessing or modifying the field of a null object etc.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What invokes a thread's run() method?",
			"answer": "After a thread is started, via its start() method of the Thread class, the JVM invokes the thread's run() method when the thread is initially executed.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is the difference between yielding and sleeping?",
			"answer": "When a task invokes its yield() method, it returns to the ready state. When a task invokes its sleep() method, it returns to the waiting state.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Why Vector class is used?",
			"answer": "The Vector class provides the capability to implement a growable array of objects. Vector proves to be very useful if you don't know the size of the array in advance, or you just need one that can change sizes over the lifetime of a program.",
			"priority": "low",
			"language": "advancedJava"
		}, {

			"question": "What are Wrapper classes?",
			"answer": "These are classes that allow primitive types to be accessed as objects. Example: Integer, Character, Double, Boolean etc.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is the difference between the paint() and repaint() methods?",
			"answer": "The paint() method supports painting via a Graphics object. The repaint() method is used to cause paint() to be invoked by the AWT painting thread.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is Serialization and deserialization?",
			"answer": "Serialization is the process of writing the state of an object to a byte stream. Deserialization is the process of restoring these objects.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Explain the use of sublass in a Java program?",
			"answer": "Sub class inherits all the public and protected methods and the implementation. It also inherits all the default modifier methods and their implementation",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is the difference between Swing and AWT components?",
			"answer": "AWT components are heavy-weight, whereas Swing components are lightweight. Heavy weight components depend on the local windowing toolkit. For example, java.awt.Button is a heavy weight component, when it is running on the Java platform for Unix platform, it maps to a real Motif button.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "Is there any limitation of using Inheritance?",
			"answer": "Yes, since inheritance inherits everything from the super class and interface, it may make the subclass too clustering and sometimes error-prone when dynamic overriding or dynamic overloading in some situation.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "When is the ArrayStoreException thrown?",
			"answer": "When copying elements between different arrays, if the source or destination arguments are not arrays or their types are not compatible, an ArrayStoreException will be thrown.",
			"priority": "low",
			"language": "advancedJava"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "python"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "python"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "python"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "android"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "android"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "android"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "android"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "kotlin"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "kotlin"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "kotlin"
		},
		{

			"question": "What is static block?",
			"answer": "It is used to initialize the static data member, It is excuted before main method at the time of classloading.",
			"priority": "low",
			"language": "kotlin"
		}

	]
}